/**
 * (2ms)
 * 方法二：
 * 这种方法效率极高，因为只有位运算，没有循环和递归，但是具有局限性，针对不同N，需要设计不同的方案
 * 这个方法是基于一个事实，对于是2的幂次的数n而言，它的所有位中只有一位是1，其他都为0，
 * 而n-1则是上述置1的那一位为0，那一位的低位全是1，所以n & (n - 1)的值应该为0
 * 而且2的幂次应该都大于0，所以只需要如下判断就可以知道是不是2的幂次了。
 * @author Phoenix-Z
 *
 */
public class Solution2 {
	public boolean isPowerOfTwo(int n) {
		return (n > 0) && ((n & (n-1)) == 0);
    }
}